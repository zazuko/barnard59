#
# This example contains two pipelines.
# graphStoreGet: Reads the content of the default graph and serializes it as N-Triples
# graphStorePut: Reads the content of the default graph and writes it to the named graph http://localhost:3030/test/put-example
#
# To get this example running, you need to start a triplestore with:
# - endpoint URL: http://localhost:3030/test/sparql
# - graph store URL: http://localhost:3030/test/data
# - some triples in the default graph
#
# Use the following command to run the pipelines:
#
# node_modules/.bin/barnard59 run --format=text/turtle --pipeline=http://example.org/pipeline/graphStoreGet examples/simple.ttl
# node_modules/.bin/barnard59 run --format=text/turtle --pipeline=http://example.org/pipeline/graphStorePut examples/simple.ttl
#

@base <http://example.org/pipeline/> .
@prefix code: <https://code.described.at/> .
@prefix p: <https://pipeline.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<graphStoreGet> a p:Pipeline, p:Readable;
  p:steps [
    p:stepList ( <getFromGraphStore> <serialize> )
  ].

<graphStorePut> a p:Pipeline;
  p:steps [
    p:stepList ( <getFromGraphStore> <setGraph> <putToGraphStore> )
  ].

<getFromGraphStore> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <file:../#get>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "http://localhost:3030/test/data"
  ].

<putToGraphStore> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <file:../#put>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "http://localhost:3030/test/data"
  ].

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats#ntriples.serialize>
  ].

<setGraph> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#setGraph>
  ];
  code:arguments ( "http://localhost:3030/test/put-example" ).
