@base <http://example.org/pipeline/> .
@prefix code: <https://code.described.at/> .
@prefix p: <https://pipeline.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<parseCsvw> a p:Pipeline;
  p:variables [
    p:variable [
      a p:Variable;
      p:name "filename";
      p:value "examples/test.csv";
    ], [
      a p:Variable;
      p:name "metadata";
      p:value "examples/test.csv-metadata.json";
    ]
  ];
  p:steps [
    p:stepList ( <readFile> <parse> <serialize> )
  ].

<readFile> a p:Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("filename"^^p:VariableName).


<parse> a p:Step;
  code:implementedBy [
    code:link <node:barnard59-formats#csvw.parse>;
    a code:EcmaScript
  ];
  code:arguments ( <parseMetadata> ).

<serialize> a p:Step;
  code:implementedBy [
    code:link <file:../node_modules/barnard59-formats#ntriples.serialize> ;
    a code:EcmaScript
  ].


<parseMetadata> a p:ObjectPipeline;
  p:steps [
    p:stepList ( <readMetadata> <parseMetadataStep> )
  ].

<readMetadata> a p:Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("metadata"^^p:VariableName).

<parseMetadataStep> a p:Step;
  code:implementedBy [
    code:link <node:barnard59-formats#jsonld.parse>;
    a code:EcmaScript
  ].
