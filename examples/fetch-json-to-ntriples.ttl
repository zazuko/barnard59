@base <http://example.org/pipeline/> .
@prefix code: <http://example.org/code/> .
@prefix p: <http://example.org/barnard59/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<utc> a p:Pipeline ;
  p:variables [
    p:variable [
      p:name "url" ;
      p:value "http://worldclockapi.com/api/json/utc/now" ;
    ] ,
    <dateContext>
  ] ;
  p:steps <steps> .

<cet> a p:Pipeline ;
  p:variables [
    p:variable [
      p:name "url" ;
      p:value "http://worldclockapi.com/api/json/cet/now" ;
    ] ,
    <dateContext>
  ] ;
  p:steps <steps> .

<dateContext>
  p:name "context" ;
  p:value """{"date\":"http://purl.org/dc/elements/1.1/date"}""" .

<steps>
  p:stepList ( <fetch> <jsonldStructure> <parse> <serialize> ) .

<fetch> a p:Step ;
  p:operation [
    code:link <file:../node_modules/barnard59-base#fetch.json> ;
    a code:ecmaScript
  ];
  p:arguments ("${url}"^^code:ecmaScriptTemplateLiteral) .

<jsonldStructure> a p:Step ;
  p:operation [
    code:link <file:../node_modules/barnard59-base#map> ;
    a code:ecmaScript
  ];
  p:arguments ("json => { return { '@context': JSON.parse(this.variables.get('context')), '@id': this.variables.get('url'), date: json.currentDateTime } }"^^code:ecmaScript) .

<parse> a p:Step ;
  p:operation [
    code:link <file:../node_modules/barnard59-formats#jsonld.parse.object> ;
    a code:ecmaScript
  ] .

<serialize> a p:Step ;
  p:operation [
    code:link <file:../node_modules/barnard59-formats#ntriples.serialize> ;
    a code:ecmaScript
  ] .
